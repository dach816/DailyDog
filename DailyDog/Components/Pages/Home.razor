@using DailyDog.Components.Pages.LogPage;
@using DailyDog.Components.Pages.LogPage.Model;
@using Domain;
@using Services;
@inject DogService DogService;
@inject LogService LogService;
@page "/"

<PageTitle>DailyDog Log</PageTitle>

<div class="row overflow-hidden">
    <div class="text-center">
        <h3 class="display-4">Today's Activities</h3>
    </div>
</div>


@if (loading)
{
    <div>Loading...</div>
}
else
{
    <CascadingValue Value="@Model" IsFixed="true">
        <LogButtons />
        <Logs />
    </CascadingValue>
}

@code {
    public LogViewModel Model { get; set; }

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        Model = new LogViewModel
        {
            Household = await DogService.GetHouseholdAsync()
        };
        Model.Activities = await DogService.GetActivitiesAsync(Model.Household.Id);
        Model.DogOwner = await DogService.GetDogOwnerAsync(Model.Household.Id);
        Model.Dogs = await DogService.GetDogsAsync(Model.Household.Id);
        Model.Logs = await LogService.GetLogsAsync(Model.Household.Id);

        loading = false;
        StateHasChanged();
    }
}